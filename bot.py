
#
# –º–æ–∂–µ—Ç –±—ã—Ç—å –±—É–¥—É –æ–±–Ω–æ–≤–ª—è—Ç—å —ç—Ç–æ—Ç shit
# xD
#


from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message
from aiogram.filters.command import CommandStart
from aiogram.client.default import DefaultBotProperties
from aiogram.enums.parse_mode import ParseMode
import asyncio, aiomysql
import logging # <- –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–±—Å–æ–ª—é—Ç–Ω–æ –≤—Å–µ–π –∏–Ω—Ñ—ã —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –±–æ—Ç–µ. –µ—Å–ª–∏ —ç—Ç–æ–≥–æ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Å—Ç–æ —Å–æ—Ç—Ä–∏—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É –∏ —Å–ª–µ–¥—É—é—â—É—é —Ç–æ–∂–µ
logging.basicConfig(level=logging.INFO) # <- –ø–æ –∂–µ–ª–∞–Ω–∏—é

TOKEN = '–≤—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ —Ç–æ–∫–µ–Ω –∏–∑ BotFather'

DB_CONFIG = {
    'host': 'localhost',
    'user': '–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–±—ã—á–Ω–æ —ç—Ç–æ root)',
    'password': '–ø–∞—Ä–æ–ª—å –æ—Ç –ø—Ä–æ—Ñ–∏–ª—è (–æ–±—ã—á–Ω–æ —ç—Ç–æ root)',
    'db': '–Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –≤–∞–º–∏ –±–¥ –≤ MySQL (–ø–æ–ª—å–∑—É—é—Å—å Open Server Panel)',
    'minsize': 5, # int 
    'maxsize': 48, # int
    'echo': True, # bool
    'autocommit': True # bool
}

pool = None

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))

dp = Dispatcher()

@dp.chosen_inline_result()
async def jalkod(result: types.ChosenInlineResult):
    async with pool.acquire() as conn:
        async with conn.cursor() as cursor:
            await cursor.execute(
                "UPDATE stickers SET s4et = s4et + 1 WHERE id = %s",
                (result.result_id,)
            )
            await conn.commit()                 

@dp.inline_query()
async def inline_result(query: types.InlineQuery):
    search_query = query.query
    results = []
    if search_query.strip() != "":
        async with pool.acquire() as con:
            async with con.cursor() as cursor:
                await cursor.execute(f'SELECT * FROM `stickers` WHERE tags like "%{search_query.strip()}%"')
                result = await cursor.fetchall()
        if result:
            for element in result:
                results.append(types.InlineQueryResultCachedVideo(
                    id=f'{element[0]}',
                    video_file_id=f'{element[1]}',
                    title=f'{element[2]}',
                    description=f'{element[3]}'  
                ))
        else:
            results.append(types.InlineQueryResultArticle(
                id='error',
                title="–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ =(",
                input_message_content=types.InputTextMessageContent(message_text="–ë–ª—è –∏ –Ω–∞—Ö—É—è —Ç—ã —ç—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –º–µ–º–∞ ü§î"),
                description="–í–æ–∑–º–æ–∂–Ω–æ –∫–æ–≥–¥–∞ –Ω–∏–±—É–¥—å –º—ã –¥–æ–±–∞–≤–∏–º —ç—Ç–æ—Ç –º–µ–º...")
            )
    else:
        async with pool.acquire() as con:
            async with con.cursor() as cursor:
                await cursor.execute(f'SELECT * FROM `stickers` order by s4et desc limit 10')
                result = await cursor.fetchall()
        for element in result:
            results.append(types.InlineQueryResultCachedVideo(
                id=f'{element[0]}',
                video_file_id=f'{element[1]}',
                title=f'üî• {element[2]}',
                description=f'{element[3]}'  
            ))
    await query.answer(results=results, cache_time=1)

@dp.message(CommandStart())
async def start_message(message: Message):
    id = message.chat.id
    bot_info = await bot.get_me()
    async with pool.acquire() as con:
        async with con.cursor() as cursor:
            await cursor.execute(f'select * from users where id_user = {id}')
            result = await cursor.fetchone()
            if not result:
                await cursor.execute(f"INSERT INTO `users` (`kod`, `id_user`) VALUES (NULL, '{id}')")
                await con.commit()
    await message.answer(f"üëã –ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.first_name}</b>!\n–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –≤ –ª—é–±–æ–π —á–∞—Ç @{bot_info.username} –∏ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–º–∞!\n<blockquote>–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –º–µ–º —Ç–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –≤–∏–¥–µ–æ —Å –º–µ–º–æ–º –∏ –æ–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!\n</blockquote>")

@dp.message(F.video)
async def video_capture(message: Message):
    file_id = message.video.file_id
    thumb = await bot.get_file(message.video.thumbnail.file_id)
    thumb_url = thumb.file_path
    await message.answer(f"=) –í—ã—à–ª–∏ –∞–¥–º–∏–Ω—É —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ: \n<code>{file_id}</code>")





async def main():
    global pool
    pool = await aiomysql.create_pool(
        **DB_CONFIG
    )
    await dp.start_polling(bot)

asyncio.run(main())